# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-ecr: circleci/aws-ecr@8.1.2
jobs:
  run-lint:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: install dependencies
            command: |
              sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
              sudo chmod +x /bin/hadolint
        - run:
            name: Run Lint
            command: |
              ls
              hadolint Dockerfile --ignore DL3003 
  #---------------------------------------------------------------------------------------------
  #---------------------------------------------------------------------------------------------
  upload-docker:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker image
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
      - run:
          name: Push Docker Image
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKER_USERNAME/$DOCKER_IMAGE_NAME
            docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME
  #---------------------------------------------------------------------------------------------
  #---------------------------------------------------------------------------------------------         
  deploy-application:
    docker:
      - image: cimg/python:3.10
    parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        docker-image-name:
          description: |
            Name of the docker image to be deployed
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "us-east-1"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployments/deployment.yml"
          get-rollout-status: true
          resource-name: deployment/nginx-webapp
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployments/deployment.yml"

  test-application:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
workflows:
  capstone-workflow:
    jobs:
      - run-lint
      - upload-docker:
          requires: [run-lint]
          filters:
            branches:
              only:
                - master
      - aws-ecr/build-and-push-image:
          name: build-and-push-image-ecr
          registry-id: AWS_ECR_REGISTRY_ID
          region: ${AWS_DEFAULT_REGION}
          repo: capstone_app
          tag: v1
          requires:
            [upload-docker]
      - aws-eks/create-cluster:
          cluster-name: eks-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - build-and-push-image-ecr
      - deploy-application:
          cluster-name: eks-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "${AWS_ECR_REGISTRY_ID}.dkr.ecr.us-east-1.amazonaws.com/capstone_app:v1"
          requires:
            - aws-eks/create-cluster
      - test-application:
          cluster-name: eks-deployment-${CIRCLE_WORKFLOW_ID:0:7}
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - deploy-application